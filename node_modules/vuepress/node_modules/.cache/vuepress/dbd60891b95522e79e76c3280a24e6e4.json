{"remainingRequest":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/mlf/Documents/Dist/学习笔记/maolfBook/docs/codeLint/README.md?vue&type=template&id=a42e3342&","dependencies":[{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/docs/codeLint/README.md","mtime":1557814141388},{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/cache-loader/dist/cjs.js","mtime":1550912094406},{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1552293419761},{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/cache-loader/dist/cjs.js","mtime":1550912094406},{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vue-loader/lib/index.js","mtime":1552293419761},{"path":"/Users/mlf/Documents/Dist/学习笔记/maolfBook/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1557716010672}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"es5\\\"><a href=\\\"#es5\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> ES5</h1> \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"源于 github上star最多的\"),_vm._ssrNode(\"<a href=\\\"https://github.com/airbnb/javascript/tree/es5-deprecated/es5\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"airbnb-es5\"),_c('OutboundLink')],2),_vm._ssrNode(\"编码规范\")],2)]),_vm._ssrNode(\" \"),_vm._ssrNode(\"<blockquote>\",\"</blockquote>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"中文版出处\"),_vm._ssrNode(\"<a href=\\\"https://github.com/sivan/javascript-style-guide/blob/master/es5/README.md#the-javascript-style-guide-guide\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"zh-airbnb-es5\"),_c('OutboundLink')],2)],2)]),_vm._ssrNode(\" <blockquote><p>用更合理的方式写 JavaScript</p></blockquote> <h2 id=\\\"类型\\\"><a href=\\\"#类型\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 类型</h2> <ul><li><p><strong>原始值</strong>: 存取直接作用于它自身。</p> <ul><li><code>string</code></li> <li><code>number</code></li> <li><code>boolean</code></li> <li><code>null</code></li> <li><code>undefined</code></li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\nbar <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; 1, 9</span>\\n</code></pre></div></li> <li><p><strong>复杂类型</strong>: 存取时作用于它自身值的引用。</p> <ul><li><code>object</code></li> <li><code>array</code></li> <li><code>function</code></li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> bar <span class=\\\"token operator\\\">=</span> foo<span class=\\\"token punctuation\\\">;</span>\\n\\nbar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">9</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span> bar<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; 9, 9</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"对象\\\"><a href=\\\"#对象\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 对象</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>使用直接量创建对象。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> item <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"不要使用\"),_vm._ssrNode(\"<a href=\\\"http://es5.github.io/#x7.6.1\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"保留字\"),_c('OutboundLink')],2),_vm._ssrNode(\"作为键名，它们在 IE8 下不工作。\"),_vm._ssrNode(\"<a href=\\\"https://github.com/airbnb/javascript/issues/61\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"更多信息\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> superman <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> clark<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'kent'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token keyword\\\">private</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> superman <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  defaults<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> clark<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'kent'</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  hidden<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")],2),_vm._ssrNode(\" <li><p>使用同义词替换需要使用的保留字。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> superman <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'alien'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> superman <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  klass<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'alien'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> superman <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'alien'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li>\")],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"数组\\\"><a href=\\\"#数组\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 数组</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>使用直接量创建数组。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>向数组增加元素时使用 Array#push 来替代直接赋值。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> someStack <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n\\n<span class=\\\"token comment\\\">// bad</span>\\nsomeStack<span class=\\\"token punctuation\\\">[</span>someStack<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'abracadabra'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\nsomeStack<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'abracadabra'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"当你需要拷贝数组时，使用 Array#slice。\"),_vm._ssrNode(\"<a href=\\\"http://jsperf.com/converting-arguments-to-an-array/7\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"jsPerf\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> len <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> itemsCopy <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> len<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  itemsCopy<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\nitemsCopy <span class=\\\"token operator\\\">=</span> items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")],2),_vm._ssrNode(\" <li><p>使用 Array#slice 将类数组对象转换成数组。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">trigger</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> args <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arguments<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token operator\\\">...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li>\")],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"字符串\\\"><a href=\\\"#字符串\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 字符串</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>使用单引号 <code>''</code> 包裹字符串。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Bob Parr&quot;</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Bob Parr'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> fullName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">&quot;Bob &quot;</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lastName<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> fullName <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Bob '</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>lastName<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>超过 100 个字符的字符串应该使用连接符写成多行。</p></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"注：若过度使用，通过连接符连接的长字符串可能会影响性能。\"),_vm._ssrNode(\"<a href=\\\"http://jsperf.com/ya-string-concat\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"jsPerf\"),_c('OutboundLink')],2),_vm._ssrNode(\" &amp; \"),_vm._ssrNode(\"<a href=\\\"https://github.com/airbnb/javascript/issues/40\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"讨论\"),_c('OutboundLink')],2),_vm._ssrNode(\".\")],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> errorMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> errorMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'This is a super long error that was thrown because \\\\\\nof Batman. When you stop to think about how Batman had anything to do \\\\\\nwith this, you would get nowhere \\\\\\nfast.'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> errorMessage <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'This is a super long error that was thrown because '</span> <span class=\\\"token operator\\\">+</span>\\n  <span class=\\\"token string\\\">'of Batman. When you stop to think about how Batman had anything to do '</span> <span class=\\\"token operator\\\">+</span>\\n  <span class=\\\"token string\\\">'with this, you would get nowhere fast.'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"程序化生成的字符串使用 Array#join 连接而不是使用连接符。尤其是 IE 下：\"),_vm._ssrNode(\"<a href=\\\"http://jsperf.com/string-vs-array-concat/2\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"jsPerf\"),_c('OutboundLink')],2),_vm._ssrNode(\".\")],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> items<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> messages<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> length<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n\\nmessages <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">{</span>\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span>\\n  message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This one worked.'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'success'</span><span class=\\\"token punctuation\\\">,</span>\\n  message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This one worked as well.'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'error'</span><span class=\\\"token punctuation\\\">,</span>\\n  message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'This one did not work.'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\nlength <span class=\\\"token operator\\\">=</span> messages<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">inbox</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">messages</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  items <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'&lt;ul&gt;'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    items <span class=\\\"token operator\\\">+=</span> <span class=\\\"token string\\\">'&lt;li&gt;'</span> <span class=\\\"token operator\\\">+</span> messages<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>message <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'&lt;/li&gt;'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> items <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'&lt;/ul&gt;'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">inbox</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">messages</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  items <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// use direct assignment in this case because we're micro-optimizing.</span>\\n    items<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'&lt;li&gt;'</span> <span class=\\\"token operator\\\">+</span> messages<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>message <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'&lt;/li&gt;'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">'&lt;ul&gt;'</span> <span class=\\\"token operator\\\">+</span> items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'&lt;/ul&gt;'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\")],2)],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"函数\\\"><a href=\\\"#函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 函数</h2> <ul><li><p>函数表达式：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 匿名函数表达式</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">anonymous</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 命名函数表达式</span>\\n<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">named</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">named</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 立即调用的函数表达式（IIFE）</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Welcome to the Internet. Please follow me.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li></ul> <p>- 永远不要在一个非函数代码块（if、while 等）中声明一个函数，浏览器允许你这么做，但它们的解析表现不一致，正确的做法是：在块外定义一个变量，然后将函数赋值给它。</p> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>注：</strong> ECMA-262 把 <code>块</code> 定义为一组语句。函数声明不是语句。\"),_vm._ssrNode(\"<a href=\\\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"阅读对 ECMA-262 这个问题的说明\"),_c('OutboundLink')],2),_vm._ssrNode(\"。\")],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>currentUser<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Nope.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> test<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>currentUser<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">test</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Yup.'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\")],2),_vm._ssrNode(\" <li><p>永远不要把参数命名为 <code>arguments</code>。这将取代函数作用域内的 <code>arguments</code> 对象。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">nope</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> arguments</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">yup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name<span class=\\\"token punctuation\\\">,</span> options<span class=\\\"token punctuation\\\">,</span> args</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li>\")],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"属性\\\"><a href=\\\"#属性\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 属性</h2> <ul><li><p>使用 <code>.</code> 来访问对象的属性。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> luke <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  jedi<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">28</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> isJedi <span class=\\\"token operator\\\">=</span> luke<span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'jedi'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> isJedi <span class=\\\"token operator\\\">=</span> luke<span class=\\\"token punctuation\\\">.</span>jedi<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>当通过变量访问属性时使用中括号 <code>[]</code>。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> luke <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  jedi<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n  age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">28</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getProp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">prop</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> luke<span class=\\\"token punctuation\\\">[</span>prop<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> isJedi <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getProp</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'jedi'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"变量\\\"><a href=\\\"#变量\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 变量</h2> <ul><li><p>总是使用 <code>var</code> 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\nsuperPower <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SuperPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> superPower <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">SuperPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>使用 <code>var</code> 声明每一个变量。\\n这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    dragonball <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'z'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token comment\\\">// （跟上面的代码比较一下，看看哪里错了）</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    dragonball <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'z'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> dragonball <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'z'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">,</span> len<span class=\\\"token punctuation\\\">,</span> dragonball<span class=\\\"token punctuation\\\">,</span>\\n    items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> dragonball<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> len<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> items <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> goSportsTeam <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> dragonball<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> length<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'doing stuff..'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">//..other stuff..</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'doing stuff..'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">//..other stuff..</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad - 不必要的函数调用</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setFirstName</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>arguments<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  name <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getName</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setFirstName</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"提升\\\"><a href=\\\"#提升\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 提升</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>变量声明会提升至作用域顶部，但赋值不会。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>notDefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; throws a ReferenceError</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span>\\n<span class=\\\"token comment\\\">// 注：变量赋值为 `true` 不会提升。</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>declaredButNotAssigned<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; undefined</span>\\n  <span class=\\\"token keyword\\\">var</span> declaredButNotAssigned <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> declaredButNotAssigned<span class=\\\"token punctuation\\\">;</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>declaredButNotAssigned<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; undefined</span>\\n  declaredButNotAssigned <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>anonymous<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; undefined</span>\\n\\n  <span class=\\\"token function\\\">anonymous</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; TypeError anonymous is not a function</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">anonymous</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'anonymous function expression'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>named<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; undefined</span>\\n\\n  <span class=\\\"token function\\\">named</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; TypeError named is not a function</span>\\n\\n  <span class=\\\"token function\\\">superPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; ReferenceError superPower is not defined</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">named</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">superPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Flying'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 当函数名跟变量名一样时，表现也是如此。</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>named<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; undefined</span>\\n\\n  <span class=\\\"token function\\\">named</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; TypeError named is not a function</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">named</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">named</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'named'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>函数声明提升它们的名字和函数体。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">example</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">superPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// =&gt; Flying</span>\\n\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">superPower</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Flying'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"了解更多信息在 \"),_vm._ssrNode(\"<a href=\\\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"JavaScript Scoping &amp; Hoisting\"),_c('OutboundLink')],2),_vm._ssrNode(\" by \"),_vm._ssrNode(\"<a href=\\\"http://www.adequatelygood.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Ben Cherry\"),_c('OutboundLink')],2),_vm._ssrNode(\".\")],2)])],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"比较运算符-等号\\\"><a href=\\\"#比较运算符-等号\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 比较运算符 &amp; 等号</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</p></li> <li><p>条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p> <ul><li><strong>对象</strong> 被计算为 <strong>true</strong></li> <li><strong>Undefined</strong> 被计算为 <strong>false</strong></li> <li><strong>Null</strong> 被计算为 <strong>false</strong></li> <li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li> <li><strong>数字</strong> 如果是 <strong>+0、-0 或 NaN</strong> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li> <li><strong>字符串</strong> 如果是空字符串 <code>''</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li></ul> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// true</span>\\n  <span class=\\\"token comment\\\">// 一个数组就是一个对象，对象被计算为 true</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>使用快捷方式。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>collection<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"了解更多信息在 \"),_vm._ssrNode(\"<a href=\\\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Truth Equality and JavaScript\"),_c('OutboundLink')],2),_vm._ssrNode(\" by Angus Croll.\")],2)])],2),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"块\\\"><a href=\\\"#块\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 块</h2> <ul><li><p>使用大括号包裹所有的多行代码块。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">thing1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">thing2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">thing3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>test<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">thing1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">thing2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">thing3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"注释\\\"><a href=\\\"#注释\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注释</h2> <ul><li><p>使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token comment\\\">// make() returns a new element</span>\\n<span class=\\\"token comment\\\">// based on the passed in tag name</span>\\n<span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token comment\\\">// @param {String} tag</span>\\n<span class=\\\"token comment\\\">// @return {Element} element</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">tag</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> element<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token comment\\\">/**\\n * make() returns a new element\\n * based on the passed in tag name\\n *\\n * @param {String} tag\\n * @return {Element} element\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">make</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">tag</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> element<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> active <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\">// is current tab</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token comment\\\">// is current tab</span>\\n<span class=\\\"token keyword\\\">var</span> active <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetching type...'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// set the default type to 'no type'</span>\\n  <span class=\\\"token keyword\\\">var</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'no type'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> type<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fetching type...'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// set the default type to 'no type'</span>\\n  <span class=\\\"token keyword\\\">var</span> type <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>type <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'no type'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> type<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p></li> <li><p>使用 <code>// FIXME:</code> 标注问题。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Calculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// FIXME: shouldn't use a global here</span>\\n  total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>使用 <code>// TODO:</code> 标注问题的解决方式。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Calculator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n  <span class=\\\"token comment\\\">// TODO: total should be configurable by an options param</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>total <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"空白\\\"><a href=\\\"#空白\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 空白</h2> <ul><li><p>使用 2 个空格作为缩进。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n∙∙∙∙<span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n∙<span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n∙∙<span class=\\\"token keyword\\\">var</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>在大括号前放一个空格。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'test'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\ndog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'attr'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token punctuation\\\">{</span>\\n  age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1 year'</span><span class=\\\"token punctuation\\\">,</span>\\n  breed<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bernese Mountain Dog'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\ndog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">set</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'attr'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  age<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1 year'</span><span class=\\\"token punctuation\\\">,</span>\\n  breed<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bernese Mountain Dog'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>isJedi<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fight</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isJedi<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">fight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fight</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Swooosh!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">fight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Swooosh!'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li><p>使用空格把运算符隔开。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> x<span class=\\\"token operator\\\">=</span>y<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> x <span class=\\\"token operator\\\">=</span> y <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>在文件末尾插入一个空行。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">global</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div><div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">global</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>↵\\n↵\\n</code></pre></div><div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">global</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...stuff...</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>↵\\n</code></pre></div></li> <li><p>在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#items'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.selected'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">highlight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.open'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#items'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n  <span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.selected'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token function\\\">highlight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n  <span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.open'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token function\\\">updateCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'#items'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.selected'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">highlight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">end</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">find</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.open'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">updateCount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> leds <span class=\\\"token operator\\\">=</span> stage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.led'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">enter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'svg:svg'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">classed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'led'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'svg:g'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'transform'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'translate('</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">','</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">')'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>tron<span class=\\\"token punctuation\\\">.</span>led<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> leds <span class=\\\"token operator\\\">=</span> stage<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">selectAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'.led'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">data</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">enter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'svg:svg'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">classed</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'led'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'width'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">*</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">append</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'svg:g'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">attr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'transform'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'translate('</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">','</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token punctuation\\\">(</span>radius <span class=\\\"token operator\\\">+</span> margin<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">')'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>tron<span class=\\\"token punctuation\\\">.</span>led<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>在块末和新语句前插入空行。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> bar<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">return</span> baz<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> bar<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">return</span> baz<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">foo</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function-variable function\\\">bar</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">foo</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token function-variable function\\\">bar</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">return</span> obj<span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li></ul> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"逗号\\\"><a href=\\\"#逗号\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 逗号</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>行首逗号: <strong>不需要</strong>。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> story <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    once\\n  <span class=\\\"token punctuation\\\">,</span> upon\\n  <span class=\\\"token punctuation\\\">,</span> aTime\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> story <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  once<span class=\\\"token punctuation\\\">,</span>\\n  upon<span class=\\\"token punctuation\\\">,</span>\\n  aTime\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> hero <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bob'</span>\\n  <span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Parr'</span>\\n  <span class=\\\"token punctuation\\\">,</span> heroName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mr. Incredible'</span>\\n  <span class=\\\"token punctuation\\\">,</span> superPower<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'strength'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> hero <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Bob'</span><span class=\\\"token punctuation\\\">,</span>\\n  lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Parr'</span><span class=\\\"token punctuation\\\">,</span>\\n  heroName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mr. Incredible'</span><span class=\\\"token punctuation\\\">,</span>\\n  superPower<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'strength'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"额外的行末逗号：<strong>不需要</strong>。这样做会在 IE6/7 和 IE9 怪异模式下引起问题。同样，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经澄清了 (\"),_vm._ssrNode(\"<a href=\\\"http://es5.github.io/#D\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"source\"),_c('OutboundLink')],2),_vm._ssrNode(\")：\")],2)])],2),_vm._ssrNode(\" <blockquote><p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p></blockquote> <pre><code>```javascript\\n// bad\\nvar hero = {\\n  firstName: 'Kevin',\\n  lastName: 'Flynn',\\n};\\n\\nvar heroes = [\\n  'Batman',\\n  'Superman',\\n];\\n\\n// good\\nvar hero = {\\n  firstName: 'Kevin',\\n  lastName: 'Flynn'\\n};\\n\\nvar heroes = [\\n  'Batman',\\n  'Superman'\\n];\\n```\\n</code></pre> <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"分号\\\"><a href=\\\"#分号\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 分号</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p><strong>使用分号。</strong></p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Skywalker'</span>\\n  <span class=\\\"token keyword\\\">return</span> name\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Skywalker'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good (防止函数在两个 IIFE 合并时被当成一个参数</span>\\n<span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'Skywalker'</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"http://stackoverflow.com/a/7365214/1712802\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"了解更多\"),_c('OutboundLink')],2),_vm._ssrNode(\".\")],2)],2)]),_vm._ssrNode(\" <p><strong><a href=\\\"#\\\">⬆ 回到顶部</a></strong></p> <h2 id=\\\"类型转换\\\"><a href=\\\"#类型转换\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 类型转换</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li><p>在语句开始时执行类型转换。</p></li> <li><p>字符串：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//  =&gt; this.reviewScore = 9;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> totalScore <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>reviewScore <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> totalScore <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>reviewScore<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> totalScore <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>reviewScore <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' total score'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> totalScore <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>reviewScore <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">' total score'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> <li><p>使用 <code>parseInt</code> 转换数字时总是带上类型转换的基数。</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> inputValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'4'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Number</span><span class=\\\"token punctuation\\\">(</span>inputValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">+</span>inputValue<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> inputValue <span class=\\\"token operator\\\">&gt;&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// bad</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>inputValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span>inputValue<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">parseInt</span><span class=\\\"token punctuation\\\">(</span>inputValue<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果因为某些原因 <code>parseInt</code> 成为你所做的事的瓶颈而需要使用位操作解决\"),_vm._ssrNode(\"<a href=\\\"http://jsperf.com/coercion-vs-casting/3\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"性能问题\"),_c('OutboundLink')],2),_vm._ssrNode(\"时，留个注释说清楚原因和你的目的。\")],2),_vm._ssrNode(\" <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">// good</span>\\n<span class=\\\"token comment\\\">/**\\n * parseInt was the reason my code was slow.\\n * Bitshifting the String to coerce it to a\\n * Number made it a lot faster.\\n */</span>\\n<span class=\\\"token keyword\\\">var</span> val <span class=\\\"token operator\\\">=</span> inputValue <span class=\\\"token operator\\\">&gt;&gt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<strong>注：</strong> 小心使用位操作运算符。数字会被当成 \"),_vm._ssrNode(\"<a href=\\\"http://es5.github.io/#x4.3.19\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"64 位值\"),_c('OutboundLink')],2),_vm._ssrNode(\"，但是位操作运算符总是返回 32 位的整数\")],2)])],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}